
Introduction:
=============
s. "Martin Fowler" - Refactoring has never been more important!
- KISS == Technical debts and no structure??

Refactoring Methods:
====================
- Descoping (enscoping?) ( Limit scope by intending into for-loop ) e.g. let i :number = 0;
- From var to let ( from global to local )
- Separate multiple vars in one line var x, y = 10, z;
- Renaming ( clear speaking names )
- Introduce classes ( From {} to Sprite, Car etc. )
- Extract methods ( separate logical units )
- Add documentation ( where it adds value )
- Add typings (!) from JS to TS conversion
- Order variables, fields and methods by visibility, type (number, boolean, string, object, collections ) and static state.
  This helps grouping members and extract them later!
- Group members by their logical corresponding
- Extract/Separate grouped members to new class
- Add const for non-changing values!
- Remove static (global) fields and turn into non-static fields with propagated context in the constructor.
- Increase visibility ( private where possible! Then protected any finally public ) => create getters/setters for access control.
- Add tests
- clear suspicious name combinations ( setX( y ) ), MathUtil.toInt( x ) => MathUtil.toInt( num )
- Remove pointless statements: rotation = rotation || 0;
- Unify level of abstraction!!
    player.render()
    stage.render()
    this.keyLeft = this.keySystem.isPressed( KEYS.KEY_LEFT ) // extract!
- Minimize method parameters by moving values or extracting to member fields etc.
- Resolve static methods to instance methods on single usages!
- (simple) for loops with iterator to foreach (if possible)
- remove redundant field namings (Player.playerX)

Tools that support:
===================
- Lint
- TS-Compiler
- IntelliJ ( "Code Inspection" )

Constructive refactorings:
==========================
- Separate stage: construction scheme and data to abstract class Stage + concrete subclass StageLegacy
- Added new classes ("Segment")
- Remove obsolete statements ( addDownhillToEnd( 0 ) => num = num || 200; )
- Introduce empty class without members that extends any.
- removing magic numbers by extracting to named constants: this.resolution = this.canvasSystem.getHeight() / 480;

        private static calculateRumbleWidth( projectedRoadWidth:number, lanes:number ) : number
        {
            return ( projectedRoadWidth / Math.max( 6,  2 * lanes ) );
        }


- extract grouped lines of code to new 'speaking' method (four key detection methods)
- Remove/Resolve all "":any" statements
- Create constructors from direct object instanciations (forced on making fields private) => newPoint = { x: 0, y: 0, z: 0 }
- cluster and separate on more than 7 items per folder, package, class, methods, fields, parameters and so on ..

Results:
==========================
Separate units
added Testability
Easy possibility to combine all elements and easily create new features.
