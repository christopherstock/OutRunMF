
Introduction:
=============
s. "Martin Fowler" - Refactoring has never been more important!

Refactoring Methods:
====================
- Descoping (enscoping?) ( Limit scope by intending into for-loop )
- From var to let ( from global to local )
- Separate multiple vars in one line var x, y = 10, z;
- Renaming ( clear speaking names )
- Introduce classes ( From {} to Sprite, Car etc. )
- Extract methods ( separate logical units )
- Add documentation ( where it adds value )
- Add typings (!) from JS to TS conversion
- Order variables, fields and methods by visibility, type (number, boolean, string, object, collections ) and static state.
- Group members by their logical corresponding
- Extract/Separate grouped members to new class
- Add const for non-changing values!
- Increase visibility ( private where possible! Then protected any finally public ) => create getters/setters for access control.
- Add tests
- clear suspicious name combinations ( setX( y ) ), MathUtil.toInt( x ) => MathUtil.toInt( num )
- Remove pointless statements: rotation = rotation || 0;

Tools that support:
===================
- Lint
- TS-Compiler
- IntelliJ ( "Code Inspection" )

Constructive refactorings:
==========================
- Separate stage: construction scheme and data to abstract class Stage + concrete subclass StageLegacy
- Added new classes ("Segment")
- Remove obsolete statements ( addDownhillToEnd( 0 ) => num = num || 200; )
- Introduce empty class without members that extends any.
- removing magic numbers by extracting to named constants: this.resolution = this.canvasSystem.getHeight() / 480;
- extract grouped lines of code to new 'speaking' method (four key detection methods)
- Remove/Resolve all "":any" statements

Results:
==========================
Separate units
added Testability
Easy possibility to combine all elements and easily create new features.
