
Introduction:
=============
s. "Martin Fowler":
- Refactoring has never been more important!
- Technical Debts are optimal!

- DRY   = Don't repeat yourself
- KISS  = Keep it stupid simple
- YAGNI = You ain't gonna need it

- cyclomatic complexity
- layer of abstraction
- cohesion

Refactoring Methods:
====================

BEFORE REFACTORING:
- Test Coverage before Refactoring
- Introduce Code Inspection Tools, Formatter, Prettifier, Linter

1. Wiederholungen eliminieren
"Don't repeat yourself!"
Informationen und Wissenskapseln atomar trennen.
Separate multiple vars from one line to multiple lines var x, y = 10, z;
Wiederholungen entfernen und vereinen.


2.
Renaming ( clear speaking names )
""
- clear suspicious name combinations ( setX( y ) ), MathUtil.toInt( x ) => MathUtil.toInt( num )
- Fix faulty namings! getVerticalScroll() { return this.scrollX } >

3.
Descoping
- Descoping: var > let
- From var to let   ( from global to local      )
- From let to const ( from variable to constant )
- Descoping (enscoping?) ( Limit scope by intending into for-loop ) e.g. let i :number = 0;

4.
- Explicitly specify, which values change and which values are constant!
let > const
- Add const for non-changing values!
=> constant settings to settings class, external XML, ini etc. .. or .properties file etc.!

5.
Move
Trennen was nicht zusammengehört,
Zusammenziehen was zusammengehört
"Gute Zäune, gute Nachbarn"

6.
Codestrukturen einführen
Codestrukturen sinnvoll nutzen
"Die Grenzen meiner Sprache sind die Grenzen meiner Welt"

Hierfür gibt es zahlreiche Codestrukturen, Structure ( Classes, Types etc. )
- Introduce classes ( From {} to Sprite, Car etc. )

- Extract/Separate grouped members to new class

- (simple) for loops with iterator to foreach (if possible)

- introduce enums
    if (player.getX() > 0.5)
        dir = -1;
    else if (player.getX() < -0.5)
        dir = 1;

7.
Zeilen in Funktionen bündeln
=======
- Extract single code fragments/lines to methods ( separate logical units )
- extract grouped lines of code to new 'speaking' method (four key detection methods)
- sprechender: ..

8.
Statische Konstrukte umwandeln in einen nicht-statischen Kontext
"Aller Rätsel Lösung liegt im Kontext."
- Turn static methods into instance methods on single usages!
- Remove static (global) fields and turn into non-static fields with propagated context in the constructor.
- remove params and turn into non-static fields

9.
Typisieren
"Was bist Du denn für einer?"
- Add typings (!) from JS to TS conversion

10.
Kapseln!
"Abgekapselt von der Welt"
(private for all fields / methods not available to outside compilation units)
=> Remove public setter not being used outside sinnlose getter/setter die nicht nach Außen zur Verfügung stehen sollen
verwendet werden.

=> Bundle setters or field accesses to one public function and make all fields private!

    // assign new segment properties
    segment.looped = segment.getIndex() < baseSegment.getIndex();
    segment.fog    = outrun.MathUtil.exponentialFog
    (
        n / outrun.SettingEngine.DRAW_DISTANCE,
        outrun.SettingGame.FOG_DENSITY
    );
    segment.clip = maxY;

11.
Auslauben!
"You ain't gonna need it!"
- Remove unused parameters, local and global variables and constants.
Auslauben ..
=> Remove method/constructor parameters that are constant when there is only one invocation
                    ( .., false, 0, 0 )
- Minimize method parameters by moving values or extracting to member fields etc.
- Remove pointless statements: rotation = rotation || 0;

12.
Einheitliche Abstraktionslevel schaffen
"Keep it stupid simple"
 - Unify level of abstraction!!
    player.render()
    stage.render()
    this.keyLeft = this.keySystem.isPressed( KEYS.KEY_LEFT ) // extract!

13.
Den Code sprechend machen
removing magic numbers and string literals by extracting to named constants:
"Es wird immer gleich ein wenig anders, wenn man es ausspricht"

this.resolution = this.canvasSystem.getHeight() / 480;
    private static calculateRumbleWidth( projectedRoadWidth:number, lanes:number ) : number
    {
        return ( projectedRoadWidth / Math.max( 6,  2 * lanes ) );
    }

- removing magic numbers by extracting to named constants: this.resolution = this.canvasSystem.getHeight() / 480;

        private static calculateRumbleWidth( projectedRoadWidth:number, lanes:number ) : number
        {
            return ( projectedRoadWidth / Math.max( 6,  2 * lanes ) );
        }



Unsorted Refactoring Methods:
=============================
- Ensure that every variable has a value! remove constructs like: ( offsetX || 0 )
- Add documentation ( where it adds value )
- Order variables, fields and methods by visibility, type (number, boolean, string, object, collections ) and static state.
  This helps grouping members and extract them later!
- Enable TSLint from the very 1st second!
- Add TypeDocs from the 1st second!
- Add Tests for new methods that implement the game logic before refactoring!
- Group members by their logical corresponding
- Redundant calculated (local) fields into non-static fields.
- Add 'readonly' modifier for all non-changing fields only assigned in the constructor!
- Increase visibility ( private where possible! Then protected any finally public ) => create getters/setters for access control.
- Add tests
- Remove pointless statements: rotation = rotation || 0;
- Add 'readonly' for non-static fields that are only assigned in the constructor!
- remove redundant field namings (Player.playerX)
- Remove clumsy methods:
  public static increase( start:number, increment:number, max:number ) : number
- Move redundant calculations to constant fields into constructor etc!
  const carW:number = outrun.Main.game.engine.imageSystem.getImage( car.getSprite() ).width * outrun.SettingEngine.SPRITE_SCALE;
- Clear speaking names:
  outrun.Drawing2D.polygon( ctx, x1 - w1 - r1, y1, x1 - w1, y1, x2 - w2, y2, x2 - w2 - r2, y2, this.color.rumble );
- Rename packages according to new functionality!
- remove or move too special 'helper' functions
- Remove one functin call with '0' and turn into '1'! remove: ( percent || 1 )
- Renaming variables on by passing it to and calling a function: ($rootTag => $productTag)

Constructive / 2nd level refactorings:
======================================
- Separate stage: construction scheme and data to abstract class Stage + concrete subclass StageLegacy
- Added new classes ("Segment")
- Remove obsolete statements ( addDownhillToEnd( 0 ) => num = num || 200; )
- Introduce empty class without members that extends any.
- Remove/Resolve all "":any" statements
- Create constructors from direct object instanciations (forced on making fields private) => newPoint = { x: 0, y: 0, z: 0 }
- cluster and separate on more than 7 items per folder, package, class, methods, fields, parameters and so on ..
=> Create abstract parent classes and extract shared fields and shared methods to parent class!
=> Unify same behaviour, formally split into different implementations: GameObject.draw() !
=> flatten method parameters: Car#update( dt:number, segments:outrun.Segment[], player:outrun.Player, playerSegment:outrun.Segment, playerW:number, stageLength:number ) : void
=> Remove completely unused or unhandy classes (Camera!)
=> Refactor: Move into classes from outside usage:
    this.player.setPlayerSegment(
        Stage.findSegment( this.segments, this.player.getZ() + this.player.getOffsetZ() )
    );
    this.player.speedPercent  = this.player.getSpeed() / outrun.SettingGame.PLAYER_MAX_SPEED;

=> Move value classes to enums!

    /** Specifies attributes for the length of the road. */
    public      static      readonly        LENGTH              :any                    =
    {
        NONE:        0,
        SHORT:       25,
        MEDIUM:      50,
        LONG:        100,
        DOUBLE_LONG: 200,
    };

=> Minimize all static accesses to Main.game

=> Unify the level of abstraction / achieve same level of abstraction (s. Player.update !)

        public update
        (
            dx          :number,
            dt          :number,
            stageLength :number,
            segments    :outrun.Segment[],
            keySystem   :outrun.KeySystem
        )
        : void
        {
            this.handleKeys( keySystem );
            this.updateZ( dt, stageLength, segments );
            this.updateX( dx );
            this.updateSpeed( dt );
            this.updateSprite();

=> Move local value into method/class

    const deltaX     :number = ( deltaTime * 2 * this.player.getSpeedPercent() );

    // update player
    this.player.update( deltaX, deltaTime, this.stageLength, this.segments, keySystem );

Results:
==========================
- Separated units that do not belong together.
- Unified units that do belong together.
- Added Testability
- Easy possibility to combine all elements and easily create new features.

Supporting Tools:
=================
- TS-Compiler
- ESLint (TSLint)
- IntelliJ ( "Code Inspection" )
- TypeDoc Documentation Generator
- TSUnit & Coverage (jest):
  Create tests and cover certain business logic methods with TSUnit tests.
- Linter, Style Fixer (Prettifier etc.)
- Method Ordering ..
